from Cryptodome.Cipher import AES
from django.conf import settings
import hashlib, random


def __random5():
    """ Generate a random sequence of 5 bytes for use in a SHA512 hash. """
    return bytes(''.join(map(chr, random.sample(range(255), 5))), 'utf-8')


def __fill():
    """ This is used to generate filler data to pad our plain text before encryption. """
    return hashlib.sha512(__random5()).digest()


def __cipher():
    """ A simple constructor we can call from both our encrypt and decrypt functions. """
    key = hashlib.sha256(bytes(settings.SECRET_KEY, 'utf-8')).digest()  # Key is generated by our SECRET_KEY in Django.
    return AES.new(key, mode=AES.MODE_ECB)
    # Here you should perhaps use MODE_CBC, and add an initialization vector for additional security.  ECB is the default, and isn't very secure.


def encrypt(data):
    """ The entrypoint for encrypting our field. """
    FILL = __fill() + __fill() + __fill()  # This is used to generate filler so we can satisfy the block size of AES.  It is best to pad with random data, than to pad with say nulls.
    return __cipher().encrypt(bytes(data, 'utf-8') + b'|' + FILL[len(data) + 1:])


def decrypt(data):
    """ Entrypoint for decryption """
    return __cipher().decrypt(data).split(b'|')[0].decode('utf-8')

